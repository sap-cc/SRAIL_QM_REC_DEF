{"version":3,"sources":["../../src/util/ODataHelper.ts"],"names":["isInstanceOf","correctPath","sPath","sEntity","oRegExp","aMatches","exec","replace","isODataPropertyBinding","oBinding","ODataPropertyBinding","isODataModel","oModel","ODataModel","getEntitySetNameByBindingContextPath","sBindingContextPath","ODataValueListParameterRecordType","getODataEntityTypeByEntitySet","oMetaModel","sEntitySet","ODataMetaModel","odataEntitySet","getODataEntitySet","entityType","odataEntityType","getODataEntityType","getODataPropertyForEntitySet","sPropertyName","oODataEntityType","oODataProperty","getODataProperty","getAllODataNavigationPropertiesForSapText","oEntityTypeDefinition","property","map","oProperty","undefined","parts","split","length","sNavigationPropertyName","navigationProperty","some","oNavigationProperty","name","filter","getAffectedPropertiesByChangedProperties","aChangedProperties","type","allChanges","indexOf","Parameters","affectedProperties","prop","LocalDataProperty","PropertyPath","propertyName","affects","aAffectedChangedProperties","concat","p","uniqueSort","slice"],"mappings":"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","sourcesContent":["import Binding from \"sap/ui/model/Binding\";\nimport Model from \"sap/ui/model/Model\";\nimport ODataMetaModel from \"sap/ui/model/odata/ODataMetaModel\";\nimport ODataPropertyBinding from \"sap/ui/model/odata/ODataPropertyBinding\";\nimport ODataModel from \"sap/ui/model/odata/v2/ODataModel\";\nimport { isInstanceOf } from \"zqm/nc/recdefectfast/util/types\";\nimport uniqueSort from \"sap/base/util/array/uniqueSort\";\n\nfunction correctPath(sPath: string) {\n    let sEntity;\n    const oRegExp = /\\((.+)\\)*/;\n    const aMatches = oRegExp.exec(sPath);\n\n    if (aMatches) {\n        sEntity = sPath.replace(aMatches[0], \"\");\n    } else {\n        sEntity = sPath || \"\";\n    }\n\n    return sEntity.replace(\"/\", \"\");\n}\n\nexport const isODataPropertyBinding = (oBinding?: Binding | null): oBinding is ODataPropertyBinding => {\n    return isInstanceOf<ODataPropertyBinding>(oBinding, ODataPropertyBinding);\n};\n\nexport const isODataModel = (oModel?: Model | null): oModel is ODataModel => {\n    return isInstanceOf<ODataModel>(oModel, ODataModel);\n};\n\nexport const getEntitySetNameByBindingContextPath = (sBindingContextPath: string) => correctPath(sBindingContextPath);\n\nexport interface ODataEntityTypeMetadataDefinition {\n    name: string;\n    namespace: string;\n    property: Array<ODataPropertyMetadataDefinition>\n    navigationProperty: Array<ODataNavigationPropertyMetadataDefinition>\n    \"sap:label\"?: string;\n    key: {\n        propertyRef: Array<{\n            name: string;\n        }>\n    }\n}\n\ninterface StringValue {\n    String: string;\n}\n\ninterface PropertyPathValue {\n    PropertyPath: string;\n}\n\ninterface BoolValue {\n    Bool: \"true\" | \"false\";\n}\n\nexport enum ODataValueListParameterRecordType {\n    /**\n     * Determines the\n     * - Elements of a main entity set that make it to the filter query\n     * - Field from a value help entity set that sets the field value in the main entity set\n     */\n    ValueListParameterOut = \"com.sap.vocabularies.Common.v1.ValueListParameterOut\",\n    /**\n     * Determines the filtering data set from a value help entity set\n     */\n    ValueListParameterIn = \"com.sap.vocabularies.Common.v1.ValueListParameterIn\",\n    /**\n     * Combination of both ValueListParameterOut and ValueListParameterIn parameters.\n     */\n    ValueListParameterInOut = \"com.sap.vocabularies.Common.v1.ValueListParameterInOut\",\n    /**\n     * Just for display reasons\n     */\n    ValueListParameterDisplayOnly = \"com.sap.vocabularies.Common.v1.ValueListParameterDisplayOnly\",\n}\n\nexport type ODataValueListParameterIn = {\n    RecordType: ODataValueListParameterRecordType.ValueListParameterIn;\n    /**\n     * Path to property in the value list type.\n     */\n    ValueListProperty: StringValue;\n    /**\n     * Path to property that is used in original model\n     */\n    LocalDataProperty: PropertyPathValue;\n}\n\nexport type ODataValueListParameterInOut = {\n    RecordType: ODataValueListParameterRecordType.ValueListParameterInOut;\n    /**\n     * Path to property in the value list type.\n     */\n    ValueListProperty: StringValue;\n    /**\n     * Path to property that is used in original model\n     */\n    LocalDataProperty: PropertyPathValue;\n}\n\nexport type ODataValueListParameterOut = {\n    RecordType: ODataValueListParameterRecordType.ValueListParameterOut;\n    /**\n     * Path to property in the value list type.\n     */\n    ValueListProperty: StringValue;\n    /**\n     * Path to property that is used in original model\n     */\n    LocalDataProperty: PropertyPathValue;\n}\n\nexport type ODataValueListParameterDisplayOnly = {\n    RecordType: ODataValueListParameterRecordType.ValueListParameterDisplayOnly;\n    /**\n     * Path to property in the value list type.\n     */\n    ValueListProperty: StringValue;\n}\n\n\nexport interface ODataPropertyMetadataDefinition {\n    name: string;\n    type: string;\n    maxLength?: string;\n    nullable?: string;\n    precision?: string;\n    scale?: string;\n    \"sap:label\"?: string;\n    \"sap:text\"?: string;\n    \"com.sap.vocabularies.Common.v1.ValueList\"?: {\n        /**\n         * Enter label information\n         */\n        Label: StringValue;\n        /**\n         * Entity set for retrieving value help\n         */\n        CollectionPath: StringValue;\n        /**\n         * True or False\n         */\n        SearchSupported: BoolValue;\n        /**\n         * Parameters to map a main entity set to a value help entity set.\n         */\n        Parameters: Array<ODataValueListParameterIn | ODataValueListParameterInOut | ODataValueListParameterOut | ODataValueListParameterDisplayOnly>\n    }\n}\n\nexport interface ODataNavigationPropertyMetadataDefinition {\n    fromRole: string\n    name: string\n    relationship: string\n    toRole: string\n}\n\n\n// export interface ODataEvaluatedValueHelpInfo {\n//     entitySet: string;\n//     entityType: string;\n//     parameterInNames: Array<string>;\n//     parameterOutNames: Array<string>;\n//     displayNames: Array<string>;\n// }\n\nexport const getODataEntityTypeByEntitySet = (oMetaModel: ODataMetaModel, sEntitySet: string): ODataEntityTypeMetadataDefinition | undefined => {\n    if (!isInstanceOf<ODataMetaModel>(oMetaModel, ODataMetaModel)) {\n        return;\n    }\n\n    const odataEntitySet = oMetaModel.getODataEntitySet(sEntitySet) as { entityType: string };\n\n    if (odataEntitySet == null || odataEntitySet.entityType == null) {\n        return;\n    }\n    const odataEntityType = oMetaModel.getODataEntityType(odataEntitySet.entityType);\n\n    if (odataEntityType == null || typeof odataEntityType === \"string\") {\n        return;\n    }\n\n    return odataEntityType as ODataEntityTypeMetadataDefinition;\n}\n\nexport const getODataPropertyForEntitySet = (oMetaModel: ODataMetaModel, sEntitySet: string, sPropertyName: string): ODataPropertyMetadataDefinition | undefined => {\n    const oODataEntityType = getODataEntityTypeByEntitySet(oMetaModel, sEntitySet);\n    if (oODataEntityType == null) {\n        return;\n    }\n\n    const oODataProperty = oMetaModel.getODataProperty(oODataEntityType, sPropertyName);\n\n    if (oODataProperty == null || typeof oODataProperty === \"string\") {\n        return;\n    }\n\n    return oODataProperty as ODataPropertyMetadataDefinition;\n}\n\n\nexport const getAllODataNavigationPropertiesForSapText = (oMetaModel: ODataMetaModel, sEntitySet: string): Array<string> => {\n    const oEntityTypeDefinition = getODataEntityTypeByEntitySet(oMetaModel, sEntitySet);\n\n    return oEntityTypeDefinition.property\n        .map((oProperty) => {\n            // we need all navigation properties for sap:text to show the correct labels\n            if (typeof oProperty[\"sap:text\"] !== \"string\") {\n                return undefined;\n            }\n            const parts = oProperty[\"sap:text\"].split(\"/\");\n\n            if (parts.length !== 2) {\n                return undefined;\n            }\n\n            const sNavigationPropertyName = parts[0];\n\n            if (oEntityTypeDefinition.navigationProperty.some((oNavigationProperty) => oNavigationProperty.name === sNavigationPropertyName)) {\n                return sNavigationPropertyName;\n            }\n\n            return undefined;\n        })\n        .filter((sNavigationPropertyName): sNavigationPropertyName is string => sNavigationPropertyName != null);\n};\n\n\nexport const getAffectedPropertiesByChangedProperties = (oMetaModel: ODataMetaModel, sEntitySet: string, aChangedProperties: Array<string>) => {\n    const type = getODataEntityTypeByEntitySet(oMetaModel, sEntitySet);\n\n    const allChanges = type\n        .property\n        .filter((property) => aChangedProperties.indexOf(property.name) !== -1)\n        .map((property) => {\n            if (property[\"com.sap.vocabularies.Common.v1.ValueList\"] && property[\"com.sap.vocabularies.Common.v1.ValueList\"].Parameters) {\n                const affectedProperties = property[\"com.sap.vocabularies.Common.v1.ValueList\"].Parameters\n                    .filter((prop): prop is ODataValueListParameterIn | ODataValueListParameterInOut | ODataValueListParameterOut => \"LocalDataProperty\" in prop)\n                    .map((prop) => prop.LocalDataProperty.PropertyPath)\n                    .filter((propertyName) => property.name !== propertyName && propertyName != null);\n                return {\n                    name: property.name,\n                    affects: affectedProperties\n                };\n            }\n            return {\n                name: property.name,\n                affects: []\n            }\n        });\n\n    const aAffectedChangedProperties = <Array<string>>[].concat(aChangedProperties, ...allChanges.map((p) => p.affects));\n\n    return uniqueSort(aAffectedChangedProperties.slice()) as Array<string>;\n}\n"],"file":"ODataHelper.js"}